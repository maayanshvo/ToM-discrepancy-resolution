(define (domain driverlog)

  (:agents a)
  (:requirements :strips :typing )

  (:types thing truck loc driver)

  (:predicates 	(OBJ ?obj- thing)
	       	(TRUCK ?truck - truck)
               	(LOCATION ?loc - loc)
		(DRIVER ?d - driver)
		(at ?obj- thing ?loc - lock)
		(in ?obj1 - thing ?obj- thing)
		(driving ?d - driver ?v - truck)
		(link ?x - loc ?y - loc) (path ?x - loc ?y - loc)
		(empty ?v - truck)
    (robotholdingpackage ?obj- thing)
    (robotholdinganypackage)
    (khowPreservingGoal)
    (disc_resolution)
    (dummy)
    (atRobot ?loc - loc)
)




  (:action ROBOT-PICK-UP-PACKAGE
:derive-condition   always
  :parameters
   (?obj- thing
    ?loc - loc)
  :precondition
   (and (OBJ ?obj) (atRobot ?loc) (LOCATION ?loc)
    (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (robotholdingpackage ?obj))

   )

   (:action ROBOT-DROP-OFF-PACKAGE
:derive-condition   always
  :parameters
   (?obj- thing
    ?loc - loc)
  :precondition
   (and (OBJ ?obj) (atRobot ?loc) (LOCATION ?loc)
    (robotholdingpackage ?obj))
  :effect
   (and (at ?obj ?loc) (not (robotholdingpackage ?obj)))

   )


   (:action ROBOT-MOVE
:derive-condition   always
  :parameters
   (?loc-from - loc
    ?loc-to - loc)
  :precondition
   (and (LOCATION ?loc-from) (LOCATION ?loc-to)
  (atRobot ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (atRobot ?loc-from)) (atRobot ?loc-to)))


(:action informAboutFirstOrderBeliefObjLoc
      :derive-condition   (always)
      :parameters         (?a1 - agent ?obj- thing  ?loc - loc)
      :precondition       (and (at ?obj ?loc) 
                                (OBJ ?obj) (LOCATION ?loc) )
      :effect             (and 
                               [?a1](at ?obj ?loc))
                                   
    )

(:action informAboutHigherOrderBeliefObjLoc
      :derive-condition   (always)
      :parameters         (?a1 - agent ?a2 - agent ?a3 - agent 
                           ?a4 - agent ?obj- thing  ?loc - loc)
      :precondition       (and [?a2][?a3][?a4](at ?obj ?loc) 
                                (OBJ ?obj) (LOCATION ?loc) )
      :effect             (and 
                               [?a1][?a2][?a3][?a4](at ?obj ?loc))
                                   
    )



(:action LOAD-TRUCK
:derive-condition   always
  :parameters
   (?obj- thing
    ?truck - truck
    ?loc - loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?obj ?loc))
  :effect
   (and (not (at ?obj ?loc)) (in ?obj ?truck)))

(:action UNLOAD-TRUCK
:derive-condition   always
  :parameters
   (?obj- thing
    ?truck - truck
    ?loc - loc)
  :precondition
   (and (OBJ ?obj) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (in ?obj ?truck))
  :effect
   (and (not (in ?obj ?truck)) (at ?obj ?loc)))

(:action BOARD-TRUCK
:derive-condition   always
  :parameters
   (?driver - driver
    ?truck - truck
    ?loc - loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
   (at ?truck ?loc) (at ?driver ?loc) (empty ?truck))
  :effect
   (and (not (at ?driver ?loc)) (driving ?driver ?truck) (not (empty ?truck))))

(:action DISEMBARK-TRUCK
:derive-condition   always
  :parameters
   (?driver - driver
    ?truck - truck
    ?loc - loc)
  :precondition
   (and (DRIVER ?driver) (TRUCK ?truck) (LOCATION ?loc)
        (at ?truck ?loc) (driving ?driver ?truck))
  :effect
   (and (not (driving ?driver ?truck)) (at ?driver ?loc) (empty ?truck)))

(:action DRIVE-TRUCK
:derive-condition   always
  :parameters
   (?truck - truck
    ?loc-from - loc
    ?loc-to - loc
    ?driver - driver)
  :precondition
   (and (TRUCK ?truck) (LOCATION ?loc-from) (LOCATION ?loc-to) (DRIVER ?driver) 
   (at ?truck ?loc-from)
   (driving ?driver ?truck) (link ?loc-from ?loc-to))
  :effect
   (and (not (at ?truck ?loc-from)) (at ?truck ?loc-to)))

(:action WALK
:derive-condition   always
  :parameters
   (?driver - driver
    ?loc-from - loc
    ?loc-to - loc)
  :precondition
   (and (DRIVER ?driver) (LOCATION ?loc-from) (LOCATION ?loc-to)
	(at ?driver ?loc-from) (path ?loc-from ?loc-to))
  :effect
   (and (not (at ?driver ?loc-from)) (at ?driver ?loc-to)))

 
)
