(define (domain grapevine)

    (:agents a b c)
    (:types loc)
    (:constants )

    (:predicates
            (secret ?agent)
        (at ?agent - agent ?l - loc)
        {AK}(connected ?l1 ?l2 - loc)
        (door_open)
        (dummy)
        (discResGoal)
    )

    (:action move
        :derive-condition   always
        :parameters         (?a - agent ?l1 ?l2 - loc)
        :precondition       (and (at ?a ?l1) (connected ?l1 ?l2))
        :effect             (and (at ?a ?l2) (!at ?a ?l1))
    )

    (:action share
        :derive-condition   never
        :parameters         (?a ?as - agent ?l - loc)
        :precondition       (and (at ?a l1) [?a](secret ?as))
        :effect             (and
                                (forall ?a2 - agent
                                    (when    (and (door_open) (at ?a2 l2))
                                         [?a2](secret ?as))
                                         )

                                (forall ?a3 - agent
                                    (when    (and (at ?a3 l1))
                                         [?a3](secret ?as))
                                         )
                            )
    )

(:action informAgentLoc
      :derive-condition   never
      :parameters         (?a1 ?a2 - agent ?lo - loc)
      :precondition       (and (at ?a2 ?lo))
      :effect             (and

                               [?a1](at ?a2 ?lo))

    )

    (:action informDoorClosed
      :derive-condition   never
      :parameters         (?a1 - agent)
      :precondition       (and (not(door_open)))
      :effect             (and

                               [?a1](!door_open))

    )

    (:action informDoorOpen
      :derive-condition   never
      :parameters         (?a1 - agent)
      :precondition       (and (door_open))
      :effect             (and

                               [?a1](door_open))

    )

)