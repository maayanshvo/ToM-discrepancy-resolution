(define (domain zeno)

  (:agents a)
  (:requirements :strips :typing )

  (:types aircraft person city fuellevel)

(:predicates
	 (at ?x - person ?c - city) (in ?p - person ?a - aircraft) (fuel-level ?a - aircraft ?l - fuellevel) (next ?l1 - fuellevel ?l2 - fuellevel)(aircraft ?p - aircraft) (person ?x - person) (city ?x - city) (flevel ?x - fuellevel) (atRobot ?city - city) )


(:action informAboutFirstOrderBeliefPersonCity
      :derive-condition   (always)
      :parameters         (?a1 - agent ?p - person ?c - city)
      :precondition       (and (at ?p ?c) 
                                )
      :effect             (and 
                               [?a1](at ?p ?c) )
                                   
    )

(:action informAboutHigherOrderBeliefPersonCity
      :derive-condition   (always)
      :parameters         (?a1 - agent ?a2 - agent ?a3 - agent 
                           ?a4 - agent ?p - person ?c - city)
      :precondition       (and [?a2][?a3][?a4](at ?p ?c)
                                )
      :effect             (and 
                               [?a1][?a2][?a3][?a4](at ?p ?c) )
                                   
    )

     (:action ROBOT-AIRCRAFT-TRANFER_PERON_BETWEEN_CITIES
:derive-condition   always
  :parameters
   (?c1 - city
    ?c2 - city
    ?p - person)
  :precondition
   (and (at ?p ?c1)
  (atRobot ?c1) )
  :effect
   (and (not (atRobot ?c1)) (atRobot ?c2) (not (at ?p ?c1)) (at ?p ?c2)))

(:action board
:derive-condition   always
 :parameters ( ?p - person ?a - aircraft ?c - city)
 :precondition
	(and (person ?p) (aircraft ?a) (city ?c)  (at ?p ?c) (at ?a ?c))
 :effect
	(and (in ?p ?a) (not (at ?p ?c))))

(:action debark
:derive-condition   always
 :parameters ( ?p - person ?a - aircraft ?c - city)
 :precondition
	(and (person ?p) (aircraft ?a) (city ?c)  (in ?p ?a) (at ?a ?c))
 :effect
	(and (at ?p ?c) (not (in ?p ?a))))

(:action fly
:derive-condition   always
 :parameters ( ?a - aircraft ?c1 - city ?c2 - city ?l1 - fuellevel ?l2 - fuellevel)
 :precondition
	(and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1))
 :effect
	(and (at ?a ?c2) (fuel-level ?a ?l2) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action zoom
:derive-condition   always
 :parameters ( ?a - aircraft ?c1 - city ?c2 - city ?l1 - fuellevel ?l2 - fuellevel ?l3 - fuellevel)
 :precondition
	(and (aircraft ?a) (city ?c1) (city ?c2) (flevel ?l1) (flevel ?l2) (flevel ?l3)  (at ?a ?c1) (fuel-level ?a ?l1) (next ?l2 ?l1) (next ?l3 ?l2))
 :effect
	(and (at ?a ?c2) (fuel-level ?a ?l3) (not (at ?a ?c1)) (not (fuel-level ?a ?l1))))

(:action refuel
:derive-condition   always
 :parameters ( ?a - aircraft ?c - city ?l - fuellevel ?l1 - fuellevel)
 :precondition
	(and (aircraft?a) (city ?c) (flevel ?l) (flevel ?l1)  (fuel-level ?a ?l) (next ?l ?l1) (at ?a ?c))
 :effect
	(and (fuel-level ?a ?l1) (not (fuel-level ?a ?l))))

)
